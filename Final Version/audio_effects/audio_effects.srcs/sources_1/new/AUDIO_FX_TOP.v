`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: 
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    input PLAY,
    input J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    
    input [5:0] Tone_Choice, //Choosing tone according to bit switches
    input vol_switch,
    input DELAY_SELECTOR,   //
    input [2:0] FUNCTION_SELECTOR,
    
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
    output [15:0] led_out, 
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4     // PmodDA2 serial clock, 50MHz clock
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_20k;
      wire clk_50M;
      
      wire [11:0] speaker_out;
      wire [11:0] tmp_out;
      wire [11:0] speaker_out_delay;
      wire [11:0] speaker_hello;
      wire [11:0] speaker_tone;
      wire [11:0] speaker_song;
      wire [11:0] record_out;
      wire [5:0] song_tone_choice;
      wire [12:0] COUNT;
      wire [11:0] MIC_in;

      
      create_clk_20k f1(CLK, clk_20k);
      create_clk_50M f2(CLK, clk_50M);
       
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
      
      SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
   
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
    
    //---------PIANO MODULE
    create_tone t1(CLK, Tone_Choice, speaker_tone);
    
    
    //---------VOLUME MODULE
    volume_to_led v1(clk_20k, MIC_in, vol_switch, FUNCTION_SELECTOR, led_out);
    
    //---------HELLO MODULE
    play_or_pause p1(clk_20k, PLAY, COUNT);
    dist_mem_gen_0 g1(COUNT, speaker_hello);
      
    
    //---------DELAY MODULE
    delay_module d1(clk_20k, MIC_in, DELAY_SELECTOR, speaker_out_delay);
    
    
    //---------EXTRA FEATURE SONG
    song_module s1(clk_20k, song_tone_choice);
    create_tone t2(CLK, song_tone_choice, speaker_song);
    
    
    assign speaker_out = (FUNCTION_SELECTOR == 3'b000) ? MIC_in :
                         (FUNCTION_SELECTOR == 3'b001) ? speaker_tone :
                         (FUNCTION_SELECTOR == 3'b010) ? speaker_out_delay :
                         (FUNCTION_SELECTOR == 3'b011) ? speaker_song :
                         (FUNCTION_SELECTOR == 3'b100 && PLAY) ? speaker_hello : 0;
                         
                                               
      
     
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
